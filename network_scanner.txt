NETWORK SCANNER 






-------------------------------------------------
#!/usr/bin/env python

import scapy.all as scapy


def scan(ip):
    arp_request = scapy.ARP(pdst=ip)
    arp_request.show()
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    broadcast.show()
    #scapy.ls(scapy.ARP())
    #scapy.ls(scapy.Ether())
    #print(broadcast.summary())
    arp_request_broadcast = broadcast/arp_request
    print(arp_request_broadcast.summary())
    arp_request_broadcast.show()

scan("10.0.2.1/24")

------------------------------------------------------------------------

#!/usr/bin/env python

import scapy.all as scapy


def scan(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1) [0]
    #print(answered_list.summary())

    for element in answered_list:
        #print(element[1].show())
        print(element[1].psrc)
        print(element[1].hwsrc)
        print("------------------------------------------")


scan("10.0.2.1/24")

----------------------------------------------------------------------------------------------------------------

#!/usr/bin/env python

import scapy.all as scapy


def scan(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1,verbose=False) [0]
    #print(answered_list.summary())

    print("IP\t\t\tMAC Address\n------------------------------------")
    clients_list = []

    for element in answered_list:
        #print(element[1].show())
        client_dict = {"ip": element[1].psrc, "mac":element[1].hwsrc}
        clients_list.append(client_dict)
        print(element[1].psrc + "\t\t" + element[1].hwsrc)
        #print("------------------------------------------")
    print(clients_list)


scan("10.0.2.1/24")

---------------------FINAL-----------------------------------------------------------------------
#!/usr/bin/env python

import scapy.all as scapy
import optparse

def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-t", "--target", dest ="target", help= "Target IP / IP range.")
    options, arguments = parser.parse_args()
    return options

def scan(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1,verbose=False) [0]

    clients_list = []

    for element in answered_list:
        #print(element[1].show())
        client_dict = {"ip": element[1].psrc, "mac":element[1].hwsrc}
        clients_list.append(client_dict)
    return (clients_list)

def print_result(results_list):
    print("IP\t\t\tMAC Address\n------------------------------------")
    for client in results_list:
        print(client["ip"] + "\t\t" + client["mac"])

options = get_arguments()
scan_result = scan(options.target)
print_result(scan_result)

----------------------------FINAL PYTHON 3--------------------------------------------

#!/usr/bin/env python

import scapy.all as scapy
import argparse
def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest ="target", help= "Target IP / IP range.")
    options = parser.parse_args()
    return options

def scan(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1,verbose=False) [0]

    clients_list = []

    for element in answered_list:
        #print(element[1].show())
        client_dict = {"ip": element[1].psrc, "mac":element[1].hwsrc}
        clients_list.append(client_dict)
    return (clients_list)

def print_result(results_list):
    print("IP\t\t\tMAC Address\n------------------------------------")
    for client in results_list:
        print(client["ip"] + "\t\t" + client["mac"])

options = get_arguments()
scan_result = scan(options.target)
print_result(scan_result)

